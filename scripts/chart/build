#!/usr/bin/env bash
set -e

echo "--- Starting the build process for llmos-gpu-stack charts ---"

TOP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." &> /dev/null && pwd )"
LLMOS_CHARTS_DIR=${LLMOS_CHARTS_DIR:-charts}
CHART_REPO=${CHART_REPO:-dev}

cd "${TOP_DIR}"
. ./scripts/version

CHART_DIST_DIR=${CHART_DIST_DIR:-dist/charts}
## create dist dir if not exist
if [ ! -d "${CHART_DIST_DIR}" ]; then
  mkdir -p "dist"
else
  rm -rf "${CHART_DIST_DIR}"
fi


cp -rf "${LLMOS_CHARTS_DIR}" "${CHART_DIST_DIR}"

function updateImageConfig() {
    # Update pullPolicy to IfNotPresent
    # Step 1: Convert YAML to JSON
    chart_path=$1
    cd "${chart_path}"
    yq eval -o=json values.yaml > values.json

    # Step 2: Use jq to update image config
    jq --arg tag "$TAG" \
      --arg  registry "$REGISTRY" \
      'walk(
        if type == "object" then
          if has("pullPolicy") and .pullPolicy == "Always" then
            .pullPolicy = "IfNotPresent"
          else
            .
          end |
          if has("repository") and .repository == "ghcr.io/llmos-ai/llmos-gpu-stack"  then
            .repository = $registry + "/llmos-gpu-stack"
          else
            .
          end |
          if has("tag") and .tag == "main-head" then
            .tag = $tag
          else
            .
          end
        else
          .
        end
      )' values.json > values-updated.json

    # Step 3: Convert JSON back to YAML
    yq eval -P values-updated.json -o yaml > values.yaml
    rm -f values.json values-updated.json
}

function patchChartVersion() {
    sed -i -e "s/0.1.0-dev/${CHART_VERSION}/g" "${gpu_stack_crd_chart_path}/Chart.yaml"
    sed -i -e "s/0.1.0-app.dev/${APP_VERSION}/g" "${gpu_stack_crd_chart_path}/Chart.yaml"
    sed -i -e "s/0.1.0-dev/${CHART_VERSION}/g" "${gpu_stack_chart_path}/Chart.yaml"
    sed -i -e "s/0.1.0-app.dev/${APP_VERSION}/g" "${gpu_stack_chart_path}/Chart.yaml"

    rm -f "${gpu_stack_crd_chart_path}/Chart.yaml-e"
    rm -f "${gpu_stack_chart_path}/Chart.yaml-e"
}

# package llmos-gpu-stack chart
gpu_stack_crd_chart_path=${CHART_DIST_DIR}/llmos-gpu-stack-crd
gpu_stack_chart_path=${CHART_DIST_DIR}/llmos-gpu-stack


patchChartVersion
updateImageConfig "${gpu_stack_chart_path}"
cd "${TOP_DIR}"

./scripts/chart/check "${LLMOS_CHARTS_DIR}"

helm lint "${gpu_stack_crd_chart_path}"
helm lint "${gpu_stack_chart_path}"

helm package ${gpu_stack_crd_chart_path} -d ${CHART_DIST_DIR} || true
helm package ${gpu_stack_chart_path} -d ${CHART_DIST_DIR} || true

#echo "Building new helm chart ${CHART_REPO} repo index:"
#curl -H "Cache-Control: no-cache" -fL "https://releases.1block.ai/gpu-stack-charts/${CHART_REPO}/index.yaml" -o "${CHART_DIST_DIR}"/index.yaml

#helm repo index --merge "${CHART_DIST_DIR}"/index.yaml ${CHART_DIST_DIR} || true

# Clean up the build
rm -rf ${gpu_stack_crd_chart_path} ${gpu_stack_chart_path}
rm -rf ${CHART_DIST_DIR}/system-charts

echo "Build llmos-gpu-stack charts completed successfully."
